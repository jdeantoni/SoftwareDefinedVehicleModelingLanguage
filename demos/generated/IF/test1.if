system test1;
type int = range 0 .. 255;
Signal Radar();
Signal Brake();
process Radar(1);
    var x clock;
    var e clock;
    
    state startS #start ;
        set x := 0;
        nextstate first;
    endstate;
    state first ;
        deadline delayable;
        when x <= 10; //mean - stdDev ?
            informal "Radar_START";
            set x := 0;
            set e := 0;
            nextstate exec;
    endstate;
    state exec;
        deadline delayable;
        when e >= 6 and e <= 14;
            informal "Radar_FINISH";
            reset e;
            output Radar();
            nextstate wait;
    endstate;
    state wait;
        when x = 10;
            set x := 0;
            nextstate jitter;
    endstate;
    state jitter;
        deadline delayable;
        when x <= 4 ;
            informal "Radar_START";
            set e := 0;
            nextstate exec;
    endstate;
endprocess;
process Brake(1);
    var x clock;
    var e clock;
    var nbData int;
    state startA #start ;
        task nbData := 0;
        set x := 0;
        nextstate first;
    endstate;
    state first ;
        when x >= 0 and x <= 10; //mean - stdDev ?
            set x := 0;
            set e := 0;
            nextstate preprocessing;
        
        input Brake;
            task nbData := nbData + 1;
            nextstate first;
    endstate;
    state wait;
        when x = 10;
            set x := 0;
            nextstate jitter;
        
        input Brake;
            task nbData := nbData + 1;
            nextstate wait;
    endstate;
    state jitter;
        deadline delayable;
        when x <= (2 * 2);
            set e := 0;
            nextstate preprocessing;
        
        input Brake;
            task nbData := nbData + 1;
            nextstate jitter;
    endstate;
    state preprocessing;
        deadline eager;
        provided nbData =  0;
            informal "Brake_USELESS_ACT";
            nextstate processing;
        deadline eager;
        provided nbData <>  0;
            informal "Brake_USEFUL_ACT";
            task nbData := 0;
            nextstate processing;
    endstate;
    state processing;
        deadline delayable;
        when x >= 1 and x <= 9;
            informal "Brake_FINISH";
            reset e;
            nextstate wait;
        
        input Brake();
            task nbData := nbData + 1;
            nextstate processing;
    endstate;
endprocess;
process AEBS_controler_s1(1);
	var x clock;

    state wait #start ;
        input Radar();
            informal "AEBS_controler_s1_START";
            set x := 0;
            nextstate processing;
    endstate;
    state processing;
        deadline delayable;
        when x >= 1 and x <= 5;
            informal "AEBS_controler_s1_FINISH";
            output Brake() to {TODO}0;
            reset x;
            nextstate wait;
    endstate;
endprocess;
