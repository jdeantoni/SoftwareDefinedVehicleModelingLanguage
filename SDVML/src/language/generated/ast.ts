/******************************************************************************
 * This file was generated by langium-cli 3.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import * as langium from 'langium';

export const SdvmlTerminals = {
    ID: /[_a-zA-Z][\w_]*/,
    INT: /[0-9]+/,
    WS: /\s+/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};

export type SdvmlTerminalNames = keyof typeof SdvmlTerminals;

export type SdvmlKeywordNames =
    | "("
    | ")"
    | "+/-"
    | ","
    | ":"
    | "AD"
    | "Actuator"
    | "App"
    | "Component"
    | "DL"
    | "ExecTime"
    | "SDV"
    | "SSP"
    | "Sensor"
    | "Signal"
    | "VSS"
    | "ms"
    | "on"
    | "periodic"
    | "publish"
    | "service"
    | "subscribe"
    | "triggered";

export type SdvmlTokenNames = SdvmlTerminalNames | SdvmlKeywordNames;

export type Signal = Actuator | Sensor;

export const Signal = 'Signal';

export function isSignal(item: unknown): item is Signal {
    return reflection.isInstance(item, Signal);
}

export type TriggeringRule = EventTriggering | PeriodicTriggering;

export const TriggeringRule = 'TriggeringRule';

export function isTriggeringRule(item: unknown): item is TriggeringRule {
    return reflection.isInstance(item, TriggeringRule);
}

export interface Actuator extends langium.AstNode {
    readonly $container: VSS;
    readonly $type: 'Actuator';
    ad: RandomVar;
    name: string;
    trigRule: TriggeringRule;
}

export const Actuator = 'Actuator';

export function isActuator(item: unknown): item is Actuator {
    return reflection.isInstance(item, Actuator);
}

export interface Component extends langium.AstNode {
    readonly $container: Model;
    readonly $type: 'Component';
    name: string;
    publishers: Array<Publisher>;
    services: Array<Service>;
    subscribers: Array<Subscriber>;
}

export const Component = 'Component';

export function isComponent(item: unknown): item is Component {
    return reflection.isInstance(item, Component);
}

export interface EventTriggering extends langium.AstNode {
    readonly $container: Actuator | Service;
    readonly $type: 'EventTriggering';
    trigger: langium.Reference<Subscriber>;
}

export const EventTriggering = 'EventTriggering';

export function isEventTriggering(item: unknown): item is EventTriggering {
    return reflection.isInstance(item, EventTriggering);
}

export interface Model extends langium.AstNode {
    readonly $type: 'Model';
    components: Array<Component>;
    name: string;
    vss: VSS;
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface PeriodicTriggering extends langium.AstNode {
    readonly $container: Actuator | Service;
    readonly $type: 'PeriodicTriggering';
    period: RandomVar;
}

export const PeriodicTriggering = 'PeriodicTriggering';

export function isPeriodicTriggering(item: unknown): item is PeriodicTriggering {
    return reflection.isInstance(item, PeriodicTriggering);
}

export interface Publisher extends langium.AstNode {
    readonly $container: Component;
    readonly $type: 'Publisher';
    name: string;
}

export const Publisher = 'Publisher';

export function isPublisher(item: unknown): item is Publisher {
    return reflection.isInstance(item, Publisher);
}

export interface RandomVar extends langium.AstNode {
    readonly $container: Actuator | PeriodicTriggering | Sensor | Service;
    readonly $type: 'RandomVar';
    mean: number;
    stdDev: number;
}

export const RandomVar = 'RandomVar';

export function isRandomVar(item: unknown): item is RandomVar {
    return reflection.isInstance(item, RandomVar);
}

export interface Sensor extends langium.AstNode {
    readonly $container: VSS;
    readonly $type: 'Sensor';
    dl: RandomVar;
    name: string;
    ssp: RandomVar;
}

export const Sensor = 'Sensor';

export function isSensor(item: unknown): item is Sensor {
    return reflection.isInstance(item, Sensor);
}

export interface Service extends langium.AstNode {
    readonly $container: Component;
    readonly $type: 'Service';
    execTime: RandomVar;
    name: string;
    trigRule: TriggeringRule;
}

export const Service = 'Service';

export function isService(item: unknown): item is Service {
    return reflection.isInstance(item, Service);
}

export interface Subscriber extends langium.AstNode {
    readonly $container: Component;
    readonly $type: 'Subscriber';
    name: string;
}

export const Subscriber = 'Subscriber';

export function isSubscriber(item: unknown): item is Subscriber {
    return reflection.isInstance(item, Subscriber);
}

export interface VSS extends langium.AstNode {
    readonly $container: Model;
    readonly $type: 'VSS';
    signals: Array<Signal>;
}

export const VSS = 'VSS';

export function isVSS(item: unknown): item is VSS {
    return reflection.isInstance(item, VSS);
}

export type SdvmlAstType = {
    Actuator: Actuator
    Component: Component
    EventTriggering: EventTriggering
    Model: Model
    PeriodicTriggering: PeriodicTriggering
    Publisher: Publisher
    RandomVar: RandomVar
    Sensor: Sensor
    Service: Service
    Signal: Signal
    Subscriber: Subscriber
    TriggeringRule: TriggeringRule
    VSS: VSS
}

export class SdvmlAstReflection extends langium.AbstractAstReflection {

    getAllTypes(): string[] {
        return [Actuator, Component, EventTriggering, Model, PeriodicTriggering, Publisher, RandomVar, Sensor, Service, Signal, Subscriber, TriggeringRule, VSS];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case Actuator:
            case Sensor: {
                return this.isSubtype(Signal, supertype);
            }
            case EventTriggering:
            case PeriodicTriggering: {
                return this.isSubtype(TriggeringRule, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: langium.ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'EventTriggering:trigger': {
                return Subscriber;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): langium.TypeMetaData {
        switch (type) {
            case Actuator: {
                return {
                    name: Actuator,
                    properties: [
                        { name: 'ad' },
                        { name: 'name' },
                        { name: 'trigRule' }
                    ]
                };
            }
            case Component: {
                return {
                    name: Component,
                    properties: [
                        { name: 'name' },
                        { name: 'publishers', defaultValue: [] },
                        { name: 'services', defaultValue: [] },
                        { name: 'subscribers', defaultValue: [] }
                    ]
                };
            }
            case EventTriggering: {
                return {
                    name: EventTriggering,
                    properties: [
                        { name: 'trigger' }
                    ]
                };
            }
            case Model: {
                return {
                    name: Model,
                    properties: [
                        { name: 'components', defaultValue: [] },
                        { name: 'name' },
                        { name: 'vss' }
                    ]
                };
            }
            case PeriodicTriggering: {
                return {
                    name: PeriodicTriggering,
                    properties: [
                        { name: 'period' }
                    ]
                };
            }
            case Publisher: {
                return {
                    name: Publisher,
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            case RandomVar: {
                return {
                    name: RandomVar,
                    properties: [
                        { name: 'mean' },
                        { name: 'stdDev' }
                    ]
                };
            }
            case Sensor: {
                return {
                    name: Sensor,
                    properties: [
                        { name: 'dl' },
                        { name: 'name' },
                        { name: 'ssp' }
                    ]
                };
            }
            case Service: {
                return {
                    name: Service,
                    properties: [
                        { name: 'execTime' },
                        { name: 'name' },
                        { name: 'trigRule' }
                    ]
                };
            }
            case Subscriber: {
                return {
                    name: Subscriber,
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            case VSS: {
                return {
                    name: VSS,
                    properties: [
                        { name: 'signals', defaultValue: [] }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new SdvmlAstReflection();
