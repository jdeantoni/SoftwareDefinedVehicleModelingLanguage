const ElkConstructor = require('elkjs/lib/elk.bundled.js').default;
import { type Module, inject } from 'langium';
import {
    createDefaultModule,
    createDefaultSharedModule,
    type DefaultSharedModuleContext,
    type PartialLangiumServices,
} from 'langium/lsp';
import {
    SdvmlGeneratedModule,
    SdvmlGeneratedSharedModule,
} from './generated/module.js';
import {
    SdvmlValidator,
    registerValidationChecks,
} from './sdvml-validator.js';
import { LangiumSprottyServices, LangiumSprottySharedServices, SprottyDefaultModule, SprottyDiagramServices, SprottySharedModule } from 'langium-sprotty';
import { SdvDiagramGenerator } from './diagram-generator.js';
import { DefaultElementFilter, ElkFactory, ElkLayoutEngine, IElementFilter, ILayoutConfigurator } from 'sprotty-elk/lib/elk-layout.js';
import { SdvmlLayoutConfigurator } from './layout-config.js';



/**
 * Declaration of custom services - add your own service classes here.
 */
export type SdvmlAddedServices = {
    validation: {
        SdvmlValidator: SdvmlValidator;
    },
    layout: {
        ElkFactory: ElkFactory,
        ElementFilter: IElementFilter,
        LayoutConfigurator: ILayoutConfigurator
    }
};

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type SdvmlServices = LangiumSprottyServices & SdvmlAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const SdvmlModule: Module<
    SdvmlServices,
    PartialLangiumServices & SdvmlAddedServices & SprottyDiagramServices 
> = {
    diagram: {
        DiagramGenerator: services => new SdvDiagramGenerator(services),
        ModelLayoutEngine: services => new ElkLayoutEngine(services.layout.ElkFactory, services.layout.ElementFilter, services.layout.LayoutConfigurator) as any
    },
    validation: {
        SdvmlValidator: () => new SdvmlValidator(),
    },
    layout: {
        ElkFactory: () => () => new ElkConstructor({ algorithms: ['layered'] }),
        ElementFilter: () => new DefaultElementFilter,
        LayoutConfigurator: () => new SdvmlLayoutConfigurator()
    },
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createSdvmlServices(context: DefaultSharedModuleContext): {
    shared: LangiumSprottySharedServices,
    Sdvml: SdvmlServices;
} {
    const shared = inject(
        createDefaultSharedModule(context),
        SdvmlGeneratedSharedModule,
        SprottySharedModule
    );
    const Sdvml = inject(
        createDefaultModule({ shared }),
        SdvmlGeneratedModule,
        SdvmlModule,
        SprottyDefaultModule,
    );
    shared.ServiceRegistry.register(Sdvml);
    registerValidationChecks(Sdvml);
    if (!context.connection) {
        // We don't run inside a language server
        // Therefore, initialize the configuration provider instantly
        shared.workspace.ConfigurationProvider.initialized({});
    }
    return { shared, Sdvml };
}
