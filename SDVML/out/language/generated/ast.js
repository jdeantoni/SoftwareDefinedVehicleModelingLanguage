/******************************************************************************
 * This file was generated by langium-cli 3.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
/* eslint-disable */
import * as langium from 'langium';
export const SdvmlTerminals = {
    ID: /[_a-zA-Z][\w_]*/,
    INT: /[0-9]+/,
    WS: /\s+/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};
export const Signal = 'Signal';
export function isSignal(item) {
    return reflection.isInstance(item, Signal);
}
export const TriggeringRule = 'TriggeringRule';
export function isTriggeringRule(item) {
    return reflection.isInstance(item, TriggeringRule);
}
export const Actuator = 'Actuator';
export function isActuator(item) {
    return reflection.isInstance(item, Actuator);
}
export const Component = 'Component';
export function isComponent(item) {
    return reflection.isInstance(item, Component);
}
export const EventTriggering = 'EventTriggering';
export function isEventTriggering(item) {
    return reflection.isInstance(item, EventTriggering);
}
export const Model = 'Model';
export function isModel(item) {
    return reflection.isInstance(item, Model);
}
export const PeriodicTriggering = 'PeriodicTriggering';
export function isPeriodicTriggering(item) {
    return reflection.isInstance(item, PeriodicTriggering);
}
export const Publisher = 'Publisher';
export function isPublisher(item) {
    return reflection.isInstance(item, Publisher);
}
export const RandomVar = 'RandomVar';
export function isRandomVar(item) {
    return reflection.isInstance(item, RandomVar);
}
export const Sensor = 'Sensor';
export function isSensor(item) {
    return reflection.isInstance(item, Sensor);
}
export const Service = 'Service';
export function isService(item) {
    return reflection.isInstance(item, Service);
}
export const Subscriber = 'Subscriber';
export function isSubscriber(item) {
    return reflection.isInstance(item, Subscriber);
}
export class SdvmlAstReflection extends langium.AbstractAstReflection {
    getAllTypes() {
        return [Actuator, Component, EventTriggering, Model, PeriodicTriggering, Publisher, RandomVar, Sensor, Service, Signal, Subscriber, TriggeringRule];
    }
    computeIsSubtype(subtype, supertype) {
        switch (subtype) {
            case Actuator:
            case Sensor: {
                return this.isSubtype(Signal, supertype);
            }
            case EventTriggering:
            case PeriodicTriggering: {
                return this.isSubtype(TriggeringRule, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'EventTriggering:trigger': {
                return Subscriber;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case Actuator: {
                return {
                    name: Actuator,
                    properties: [
                        { name: 'ad' },
                        { name: 'name' },
                        { name: 'trigRule' }
                    ]
                };
            }
            case Component: {
                return {
                    name: Component,
                    properties: [
                        { name: 'name' },
                        { name: 'publishers', defaultValue: [] },
                        { name: 'services', defaultValue: [] },
                        { name: 'subscribers', defaultValue: [] }
                    ]
                };
            }
            case EventTriggering: {
                return {
                    name: EventTriggering,
                    properties: [
                        { name: 'trigger' }
                    ]
                };
            }
            case Model: {
                return {
                    name: Model,
                    properties: [
                        { name: 'components', defaultValue: [] },
                        { name: 'name' },
                        { name: 'signals', defaultValue: [] }
                    ]
                };
            }
            case PeriodicTriggering: {
                return {
                    name: PeriodicTriggering,
                    properties: [
                        { name: 'period' }
                    ]
                };
            }
            case Publisher: {
                return {
                    name: Publisher,
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            case RandomVar: {
                return {
                    name: RandomVar,
                    properties: [
                        { name: 'mean' },
                        { name: 'stdDev' }
                    ]
                };
            }
            case Sensor: {
                return {
                    name: Sensor,
                    properties: [
                        { name: 'dl' },
                        { name: 'name' },
                        { name: 'ssp' }
                    ]
                };
            }
            case Service: {
                return {
                    name: Service,
                    properties: [
                        { name: 'execTime' },
                        { name: 'name' },
                        { name: 'trigRule' }
                    ]
                };
            }
            case Subscriber: {
                return {
                    name: Subscriber,
                    properties: [
                        { name: 'name' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}
export const reflection = new SdvmlAstReflection();
//# sourceMappingURL=ast.js.map